{"version":3,"sources":["codeTimer.js"],"names":["calcTime","sec","seconds","minutes","Math","floor","hours","timer","saveSeconds","secondsOutput","minutesOutput","hoursOutput","document","title","timerLooping","startTimer","setTimeout","stopTimer","clearTimeout","timerValue","localStorage","getItem","Number","timerContainer","createElement","timerHTML","className","innerHTML","addEventListener","body","appendChild","timerHeader","querySelector","timerBody","timerSave","timerStart","onclick","this","innerText","alert","setItem","Object","assign","style","position","bottom","right","padding","background","border","transition","onmouseenter","opacity","onmouseleave","marginBottom","borderBottom","textAlign","paddingLeft","paddingRight","marginRight","minWidth"],"mappings":"AAmCA,SAASA,SAASC,GACfC,QAAWD,EAAM,GAGjBE,QAAcC,KAAKC,MAAMJ,EAAM,IAC/BK,MAAcF,KAAKC,MAAMF,QAAU,IACnCA,SAAiC,GAARG,MAY5B,SAASC,QAENC,gBADAN,QAGa,IAAM,IAAOA,QAAU,EAAGC,WACpCA,QAAU,IAAM,IAAOA,QAAU,EAAGG,SAGvCG,cAAkBP,SAAW,GAAMA,QAAU,IAAMA,QACnDQ,cAAkBP,SAAW,GAAMA,QAAU,IAAMA,QACnDQ,YAAkBL,OAAS,GAAMA,MAAQ,IAAMA,MAK5CM,SAASC,MAFA,GAATP,MAEkBK,YAAc,IAAMD,cAAgB,IAAMD,cAG1CC,cAAgB,IAAMD,cAK9C,SAASK,eACNP,QACAQ,WAAaC,WAAWF,aAAc,KAIzC,SAASG,YAAaC,aAAaH,YA3DnC,IACGA,WACAT,MAAOH,QAASD,QAChBM,YACAG,YAAaD,cAAeD,cAG3BU,WAAaC,aAAaC,QAAQ,cAatCrB,SAXaQ,YAAbW,WAA2BG,OAAOH,YAA4B,GA6D9D,IACGI,eAAiBX,SAASY,cAAc,OACxCC,UAGHA,UAAY,iDAEZA,WAAa,+BAEVA,WAAa,uDAEbA,WAAa,qDAEhBA,WAAa,SAGbF,eAAeG,UAAY,sBAC3BH,eAAeI,UAAYF,UAG3Bb,SAASgB,iBAAiB,mBAAoB,WAG3ChB,SAASiB,KAAKC,YAAYP,gBAE1B,IAAIQ,EAAgBnB,SAASoB,cAAc,0CACvCC,EAAgBrB,SAASoB,cAAc,wCACvCE,EAAgBtB,SAASoB,cAAc,4DACvCG,EAAgBvB,SAASoB,cAAc,6DAM3CG,EAAWC,QAAU,WACI,SAAlBC,KAAKC,WACNxB,eACAuB,KAAKC,UAAY,SACS,SAAlBD,KAAKC,WACbrB,YACAoB,KAAKC,UAAY,SACZC,MAAM,UAIjBL,EAAUE,QAAU,WAEjBhB,aAAaoB,QAAQ,aAAchC,cAatCiC,OAAOC,OAAOnB,eAAeoB,OAC1BC,SAAU,QACVC,OAAQ,EACRC,MAAO,EACPC,QAAS,MACTC,WAAY,UACZC,OAAQ,iBACRC,WAAY,yBAGf3B,eAAe4B,aAAe,WAAYd,KAAKM,MAAMS,QAAU,GAE/D7B,eAAe8B,aAAe,WAAYhB,KAAKM,MAAMS,QAAU,KAG/DX,OAAOC,OAAOX,EAAYY,OACvBK,WAAY,UACZD,QAAS,MACTO,aAAc,OACdC,aAAc,iBACdC,UAAW,WAIdf,OAAOC,OAAOT,EAAUU,OACrBc,YAAa,MACbC,aAAc,QAIjBjB,OAAOC,OAAOP,EAAWQ,OACtBgB,YAAa,MACbC,SAAU,SAGbnB,OAAOC,OAAOR,EAAUS,OACrBiB,SAAU","file":"../codeTimer.min.js","sourcesContent":["/*\n   =========== User Guid of Content ===========\n   - Define Variables\n      |- Hours, Minutes, Seconds and Output Variables for Hours, Minutes, Seconds\n   - Get The Prevous Saved Timer\n   - Timer Calculation\n      |- Run timer and calc on the run\n         |=> Increase seconds\n         |=> After 60 sec increase minutes\n         |=> After 60 min increase hours\n         |=> Beautify the output for human reading HH:MM:SS\n         |=> Show hours only when reach hours\n   - Create HTML Elements\n      |- Main Div\n      |- Start / Stop Button\n      |- Save Button\n   - Make the code run only when document ready xD\n      |- Style HTML Elements\n      |- Run Timer (Start / Pause / Save Timer)\n*/\n\n\n// - Declare Variables\nvar\n   startTimer, // declare variable for timer timming function (make it global => line 74)\n   hours, minutes, seconds, // Timming Variables\n   saveSeconds, // save and reset timer value\n   hoursOutput, minutesOutput, secondsOutput; // to output with human friendly style\n\n// get the timer value from local storage\nvar timerValue = localStorage.getItem('timerValue');\n// if timerValue have an old saved data push it to saveSeconds\ntimerValue ? saveSeconds = Number(timerValue) : saveSeconds = 0;\n\n// convert the saved seconds into hours, minutes and seconds\nfunction calcTime(sec) {\n   seconds  = sec % 60;\n   // minutes  = Math.floor( (sec % 3600) / 60); // another way to calc\n   // hours    = Math.floor( (sec % (3600 * 60) ) / 3600 ); // another way to calc\n   minutes     = Math.floor(sec / 60);\n   hours       = Math.floor(minutes / 60);\n   minutes     = minutes - (hours * 60);\n} // calcTime()\ncalcTime(saveSeconds);\n\n/*\n   ========== Timer Calculation  ==========\n   |-> Run timer and calc on the run\n   |-> looping for timer functionality\n   |-> stop / pause timer functionality\n*/\n\n//    - calculate the seconds, minutes and hours on the run\nfunction timer() {\n   seconds++; // increase seconds (current)\n   saveSeconds++; // save the seconds (total)\n\n   if(seconds / 60 == true) {seconds = 0; minutes++} // after 60 sec increase minutes\n   if(minutes / 60 == true) {minutes = 0; hours++} // after 60 min increase hours\n\n   // beautify the output for human reading\n   secondsOutput =  (seconds >= 10) ? seconds : '0' + seconds;\n   minutesOutput =  (minutes >= 10) ? minutes : '0' + minutes;\n   hoursOutput   =  (hours >= 10) ? hours : '0' + hours;\n\n   // show hours only when reach hours\n   if(hours == true) {\n      // update the title\n      document.title  = hoursOutput + ':' + minutesOutput + ':' + secondsOutput;\n   } else {\n      // update the title\n      document.title  = minutesOutput + ':' + secondsOutput;\n   } // end if - else\n} // end timer()\n\n// looping for timer functionality\nfunction timerLooping() {\n   timer();\n   startTimer = setTimeout(timerLooping, 1000);\n}; // end timerLooping()\n\n// stop / pause timer functionality\nfunction stopTimer() {clearTimeout(startTimer)}\n\n/*\n   ========== Create HTML Elements ==========\n   Creat HTML codeTimer main contianer\n      |-> codeTimer heading title\n      |-> codeTimer heading body\n         ||=> codeTimer start / pause button\n         ||=> codeTimer Save timer button\n*/\n\nvar\n   timerContainer = document.createElement('div'),\n   timerHTML;\n\n// create timer header\ntimerHTML = '<div class=\"codeTimer-header\">Code Timer</div>';\n// open timer body\ntimerHTML += '<div class=\"codeTimer-body\">';\n   // create start / pause button\n   timerHTML += '<button class = \"codeTimer-btn-start\">Start</button>';\n   // create Save timer button\n   timerHTML += '<button class = \"codeTimer-btn-save\">Save</button>';\n// close timer body\ntimerHTML += '</div>';\n\n// define classes and inner text for them\ntimerContainer.className = 'codeTimer-container';\ntimerContainer.innerHTML = timerHTML;\n\n// when don content loaded\ndocument.addEventListener(\"DOMContentLoaded\", function(){\n\n   // append the button to the end of the body\n   document.body.appendChild(timerContainer);\n\n   var timerHeader   = document.querySelector('.codeTimer-container .codeTimer-header');\n   var timerBody     = document.querySelector('.codeTimer-container .codeTimer-body');\n   var timerSave     = document.querySelector('.codeTimer-container .codeTimer-body .codeTimer-btn-save');\n   var timerStart    = document.querySelector('.codeTimer-container .codeTimer-body .codeTimer-btn-start');\n\n   /*\n      ========== Start / Save Timer ==========\n   */\n   // when click the Start / Pause button\n   timerStart.onclick = function() {\n      if (this.innerText == 'Start') {\n         timerLooping();\n         this.innerText = 'Pause';\n      } else if (this.innerText == 'Pause') {\n         stopTimer();\n         this.innerText = 'Start';\n      } else {alert('ERROR')}\n   } // timerStart.onclick()\n\n   // save the timer on click\n   timerSave.onclick = function(){\n      // save the timer to the local storage\n      localStorage.setItem('timerValue', saveSeconds);\n   } // end onclick\n\n   /*\n      ========== Style codeTimer ==========\n      |-> container style\n         |= hover functions\n      |-> header style\n      |-> body style\n      |-> btn-save style\n   */\n\n   // codeTimer-container style\n   Object.assign(timerContainer.style, {\n      position: 'fixed',\n      bottom: 0,\n      right: 0,\n      padding: '5px',\n      background: '#EFEFEF',\n      border: '1px solid #CCC',\n      transition: 'all 0.2s ease-in-out'\n   });\n   // appear on hover\n   timerContainer.onmouseenter = function() {this.style.opacity = 1}\n   // disappear on normal state\n   timerContainer.onmouseleave = function() {this.style.opacity = 0.15}\n\n   // codeTimer-header style\n   Object.assign(timerHeader.style, {\n      background: '#eaeaea',\n      padding: '1px',\n      marginBottom: '10px',\n      borderBottom: '1px solid #CCC',\n      textAlign: 'center'\n   });\n\n   // codeTimer-body style\n   Object.assign(timerBody.style, {\n      paddingLeft: '5px',\n      paddingRight: '5px'\n   });\n\n   // codeTimer-btn-start style\n   Object.assign(timerStart.style, {\n      marginRight: '5px',\n      minWidth: '54px'\n   });\n   // codeTimer-btn-save style\n   Object.assign(timerSave.style, {\n      minWidth: '54px'\n   });\n});\n"]}